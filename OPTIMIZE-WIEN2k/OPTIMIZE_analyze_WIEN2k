#!/usr/bin/env python
#%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
#%!%!% ------------------------------ OPTIMIZE_analyze_WIEN2k ------------------------------ %!%!%#
#%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
#
# AUTHOR:
#    Rostam Golesorkhtabar  
#    r.golesorkhtabar@gmail.com
# 
# DATE:
#    Tue Jan 01 00:00:00 2013
#
# SYNTAX:
#    python OPTIMIZE_analyze_WIEN2k.py
#           OPTIMIZE_analyze_WIEN2k
# 
# EXPLANATION:
#
#__________________________________________________________________________________________________

from pylab import *
from math  import *
import os
import sys
import glob
import copy
import math
import os.path
import numpy as np
from   lxml  import etree as ET
import matplotlib.pyplot as plt
import pylab             as pyl
from   scipy.optimize import fmin_powell

#%!%!%--- CONSTANTS ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
_e   =  1.602176565e-19         # elementary charge
Bohr =  5.291772086e-11         # a.u. to meter
Ry2eV= 13.605698066             # Ryd to eV
ToGPa= (_e*Ry2eV)/(1e9*Bohr**3) # Ryd/[a.u.]^3 to GPa
#--------------------------------------------------------------------------------------------------

#%!%!%--- SUBROUTINS AND FUNCTIONS ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
def E_eos(p0, V):
    if (eos=='M'):
        """ Murnaghan Energy"""
        E0, V0, B0, Bp = p0
        E = E0 + (B0*V/Bp*(1/(Bp-1)*(V0/V)**Bp +1)-B0*V0/(Bp-1))
    else:
        """ Birch-Murnaghan Energy"""
        E0, V0, B0, Bp = p0
        E = E0 + (9.*B0*V0/16)*(((((V0/V)**(2./3))-1.)**3.)*Bp \
               + ((((V0/V)**(2/3.))-1.)**2.)*(6.-4.*((V0/V)**(2./3.))))
    return E
#--------------------------------------------------------------------------------------------------

def P_eos(p0, V):
    if (eos=='M'):
        """ Murnaghan Pressure"""
        E0, V0, B0, Bp = p0
        P = B0/Bp*((V0/V)**Bp - 1.)
    else:
        """ Birch-Murnaghan Pressure"""
        E0, V0, B0, Bp = p0
        P = 3./2*B0*((V0/V)**(7./3) - (V0/V)**(5./3))*(1. + 3./4*(Bp-4.)*((V0/V)**(2./3) - 1.))
    return P
#--------------------------------------------------------------------------------------------------

def snr(p0, v, e):
    """ Squared norm of residue vector calculation """
    return np.sum((e - E_eos(p0, v))**2.)
#--------------------------------------------------------------------------------------------------

def sortlist(lst1, lst2):
    temp = copy.copy(lst1)

    lst3 = []
    lst4 = []

    temp.sort()

    for i in range(len(lst1)):
        lst3.append(lst1[lst1.index(temp[i])])
        lst4.append(lst2[lst1.index(temp[i])])

    return lst3, lst4
#__________________________________________________________________________________________________

#%!%!%--- Reading the INFO file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
INFO_file = str(glob.glob('INFO_*')[0])

INFO=open(INFO_file,'r')
mod =INFO_file[5:]

l1  = INFO.readline()
SGN = int(l1.split()[-1])

l2  = INFO.readline()

l3  = INFO.readline()
mdr = float(l3.split()[-1])

l4  = INFO.readline()
NoP = int(l4.split()[-1])

INFO.close()
#--------------------------------------------------------------------------------------------------

#%!%!%--- Specifying the crystal lattice using Space-Group Number ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
if (1 <= SGN and SGN <= 2):      # Triclinic
    LC = 'N'

elif(3 <= SGN and SGN <= 15):    # Monoclinic
    LC = 'M'

elif(16 <= SGN and SGN <= 74):   # Orthorhombic
    LC = 'O'

elif(75 <= SGN and SGN <= 88):   # Tetragonal II
    LC = 'TII'
  
elif(89 <= SGN and SGN <= 142):  # Tetragonal I
    LC = 'TI'

elif(143 <= SGN and SGN <= 148): # Rhombohedral II 
    LC = 'RII'

elif(149 <= SGN and SGN <= 167): # Rhombohedral I
    LC = 'RI'

elif(168 <= SGN and SGN <= 176): # Hexagonal II
    LC = 'HII'

elif(177 <= SGN and SGN <= 194): # Hexagonal I
    LC = 'HI'

elif(195 <= SGN and SGN <= 206): # Cubic II
    LC = 'CII'

elif(207 <= SGN and SGN <= 230): # Cubic I
    LC = 'CI'

else: sys.exit('\n     .... Oops ERROR: WRONG Space-Group Number !?!?!?    \n')
#--------------------------------------------------------------------------------------------------

#%!%!%--- Reading the "case_P.struct" file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
Path1= os.getcwd(); os.chdir('../')
Path2= os.getcwd(); os.chdir('../')
Path3= os.getcwd(); os.chdir(Path1)
case_P_struct = Path2[len(Path3)+1:]+'_P.struct'

if (os.path.exists(mod.lower()+'-struct/'+case_P_struct) == False):
    sys.exit('\n     .... Oops ERROR: There is NO "'+case_P_struct +'" file \
              \n                      in the "'+mod.lower()+'-struct" directory !?!?!?\n')

fP   = open(mod.lower()+'-struct/'+case_P_struct, 'r')
Plins= fP.readlines()
fP.close()

a1    = float(Plins[3][ 0:10])
a2    = float(Plins[3][10:20])
a3    = float(Plins[3][20:30])
alpha = float(Plins[3][30:40])
beta  = float(Plins[3][40:50])
gamma = float(Plins[3][50:60])

#%!%!%--- Making the M_old matrix ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
alpha = radians(alpha)
beta  = radians(beta)
gamma = radians(gamma)

M_old = zeros((3,3))

if (LC == 'CI'  or \
    LC == 'CII' or \
    LC == 'TI'  or \
    LC == 'TII' or \
    LC == 'O'):

    M_old[0,0] = a1
    M_old[0,1] = 0.
    M_old[0,2] = 0.

    M_old[1,0] = 0.
    M_old[1,1] = a2
    M_old[1,2] = 0.

    M_old[2,0] = 0.
    M_old[2,1] = 0.
    M_old[2,2] = a3

if (LC == 'HI' or \
    LC == 'HII'):

    M_old[0,0] = a1*sqrt(3.)/2.
    M_old[0,1] =-a1/2.
    M_old[0,2] = 0.

    M_old[1,0] = 0.
    M_old[1,1] = a2
    M_old[1,2] = 0.

    M_old[2,0] = 0.
    M_old[2,1] = 0.
    M_old[2,2] = a3

if (LC == 'RI' or \
    LC == 'RII'):
    if (SGN == 146 or \
        SGN == 148 or \
        SGN == 155 or \
        SGN == 160 or \
        SGN == 161 or \
        SGN == 166 or \
        SGN == 167 ):

        M_old[0,0] = a1*sin(alpha/2.)
        M_old[0,1] =-a1*sin(alpha/2.)/sqrt(3.)
        M_old[0,2] = a1*sqrt(1.-(4./3.*(sin(alpha/2.))**2.))

        M_old[1,0] = 0.
        M_old[1,1] =-M_old[0,1]*2.
        M_old[1,2] = M_old[0,2]

        M_old[2,0] =-M_old[0,0]
        M_old[2,1] = M_old[0,1]
        M_old[2,2] = M_old[0,2]

    else:
        M_old[0,0] = a1*sqrt(3.)/2.
        M_old[0,1] =-a1/2.
        M_old[0,2] = 0.

        M_old[1,0] = 0.
        M_old[1,1] = a2
        M_old[1,2] = 0.

        M_old[2,0] = 0.
        M_old[2,1] = 0.
        M_old[2,2] = a3

if (LC == 'M'):
    M_old[0,0] = a1*sin(gamma)
    M_old[0,1] = a1*cos(gamma)
    M_old[0,2] = 0.

    M_old[1,0] = 0.
    M_old[1,1] = a2
    M_old[1,2] = 0.

    M_old[2,0] = 0.
    M_old[2,1] = 0.
    M_old[2,2] = a3


if (LC == 'N'):
    M_old[0,0] = a1
    M_old[0,1] = 0.
    M_old[0,2] = 0.

    M_old[1,0] = a2*cos(gamma)
    M_old[1,1] = a2*sin(gamma)
    M_old[1,2] = 0.  

    M_old[2,0] = a3*cos(beta)
    M_old[2,1] =(a3*(cos(alpha)-cos(beta)*cos(gamma)))/sin(gamma)    
    M_old[2,2] = a3*sqrt(1.-(cos(alpha))**2.-(cos(beta))**2.-(cos(gamma))**2. \
               + 2.*cos(alpha)*cos(beta)*cos(gamma))/sin(gamma)

#--------------------------------------------------------------------------------------------------

#%!%!%--- Reading energies ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
if (mod == 'VOL'):

    volume = []
    energy = []

    vollist= glob.glob('vol_??')
    for vol_num in vollist:
        os.chdir(vol_num)

        energy_output = vol_num +'_Converged.scf'
        if (os.path.exists(energy_output) == False):
            print '\n.... Oops NOTICE: There is NO '+ energy_output +' file !?!?!?    \n'

        for line in open(energy_output,'r'):
            if (line.find(':VOL  :')>=0):
                VOL = float(line.split()[-1])
        volume.append(VOL)

        for line in open(energy_output,'r'):
            if (line.find(':ENE  :')>=0):
                ENE = float(line.split()[-1])
        energy.append(ENE)

        os.chdir('../')

    volume, energy = sortlist(volume, energy)

    fvol = open('energy-vs-volume.dat', 'w')
    for i in range(len(energy)):
        print >>fvol, volume[i],'   ', energy[i]
    fvol.close()

    vi, ei = np.loadtxt('energy-vs-volume.dat').T
    if (len(ei) < 3): sys.exit('\n.... Oops ERROR: EOS fit needs at least 3 points.    \n')

    #%!%!%!%!--- Reading the EOS type ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    eos = raw_input('\n>>>> Murnaghan or Birch-Murnaghan EOS: [M/B] ').upper()
    if (eos != 'B' and eos != 'M'): sys.exit("\n    ... Oops ERROR: Choose 'B' or 'M' \n")
    if (eos == 'B'): eos = 'BM'
    #----------------------------------------------------------------------------------------------

    #%!%!%!%!--- FIT CALCULATIONS ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    a2, a1, a0 = np.polyfit(vi, ei, 2)
    V0 = -a1/(2.*a2)
    E0 = a2*V0**2. + a1*V0 + a0
    B0 = a2*V0
    Bp = 2.

    p0 = [E0, V0, B0, Bp]

    viei = sorted([zip(vi, ei)])
    v, e = np.array(viei).T

    p1, fopt, direc, n_iter, n_funcalls, warnflag = \
    fmin_powell(snr, p0, args=(v, e), full_output=True, disp=0)
    E0, V0, B0, Bp = p1

    print\
    '\n Log(Final Residue in Ryd):'+str(round(log10(sqrt(fopt)),3)),'\n'\
    '\n === Final Parameters ===='             \
    '\n E0 = '+str(round(E0,8))+' [Ryd]'       \
    '\n V0 = '+str(round(V0,4))+' [Bohr^3]'    \
    '\n B0 = '+str(round(B0*ToGPa,3))+' [GPa]' \
    "\n B' = "+str(round(Bp,3)),               \
    '\n ========================='

    #%!%!%--- WRITING THE OUTPUT FILE ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    outf = open(eos+'_eos.out', 'w')

    if (eos=='M'):
        print >>outf,' === Murnaghan eos ========='
    else:
        print >>outf,' === Birch-Murnaghan eos ==='

    print >>outf,                              \
      ' E0 = '+str(round(E0,8))+' [Ryd]'       \
    '\n V0 = '+str(round(V0,4))+' [Bohr^3]'    \
    '\n B0 = '+str(round(B0*ToGPa,3))+' [GPa]' \
    "\n B' = "+str(round(Bp,3))    +           \
    '\n ==========================='           \
    '\n Volume    E_dft-E_eos    Pressure [GPa]'

    for i in range(len(ei)):
        Pi    = P_eos(p1, vi[i])*ToGPa
        ei_eos= E_eos(p1, vi[i])

        if (Pi>0):
            Pressure = '+'+str(round(Pi,3))
        else:
            Pressure = str(round(Pi,3))
        print >>outf, str(round(vi[i],4)),'%12.8f'%(ei[i]-ei_eos),'    ', Pressure

    outf.close()
    #----------------------------------------------------------------------------------------------

    #%!%!%--- Writing the 'eos-optimized.struct' file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    V_in = np.linalg.det(M_old)
    s_min = (V0/V_in)**(1./3.)-1.
    
    M_min = zeros((3,3))
    
    M_min[0,0] = 1. + s_min
    M_min[0,1] = 0.
    M_min[0,2] = 0.

    M_min[1,0] = 0.
    M_min[1,1] = 1. + s_min
    M_min[1,2] = 0.  

    M_min[2,0] = 0.
    M_min[2,1] = 0.
    M_min[2,2] = 1. + s_min

    M_opt = dot(M_old, M_min)
    #--- Calculating the distorted lattice parameters and angles ----------------------------------
    A1    = sqrt(M_opt[0,0]**2. + M_opt[0,1]**2. + M_opt[0,2]**2.)
    A2    = sqrt(M_opt[1,0]**2. + M_opt[1,1]**2. + M_opt[1,2]**2.)
    A3    = sqrt(M_opt[2,0]**2. + M_opt[2,1]**2. + M_opt[2,2]**2.)

    ALPHA = degrees(acos((M_opt[1,0]*M_opt[2,0] + \
                          M_opt[1,1]*M_opt[2,1] + \
                          M_opt[1,2]*M_opt[2,2])/(A2*A3)))
    BETA  = degrees(acos((M_opt[0,0]*M_opt[2,0] + \
                          M_opt[0,1]*M_opt[2,1] + \
                          M_opt[0,2]*M_opt[2,2])/(A1*A3)))
    GAMMA = degrees(acos((M_opt[0,0]*M_opt[1,0] + \
                          M_opt[0,1]*M_opt[1,1] + \
                          M_opt[0,2]*M_opt[1,2])/(A1*A2)))
    #----------------------------------------------------------------------------------------------

    fo = open(eos+'-optimized.struct', 'w')

    Plins.pop(0)
    Plins.insert(0,eos+' EOS optimized structure\n')

    Plins.pop(3)
    Lattice_Parameters = '%10.6f'%(A1)   +'%10.6f'%(A2)  +'%10.6f'%(A3)\
                       + '%10.6f'%(ALPHA)+'%10.6f'%(BETA)+'%10.6f'%(GAMMA)
    Plins.insert(3, Lattice_Parameters+'\n')

    for i in range(len(Plins)):
        print>>fo, Plins[i],
    fo.close()
    print '\n     Optimized lattice parameters saved into "'+eos+'-optimized.struct" file.\n'
    #----------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
if (mod != 'VOL'):

    fee  = open('energy-vs-strain.dat', 'w')

    for i in range(1, NoP+1):
        if (i<10):
            dir_num = mod.lower() +'_0'+str(i)
        else:
            dir_num = mod.lower() +'_' +str(i)

        if (os.path.exists(dir_num) == False):
            print '\n    .... Oops NOTICE: There is NO '+ dir_num +' directory !?!?!?    \n'
            break
    
        os.chdir(dir_num)

        energy_output = dir_num +'_Converged.scf'
        if (os.path.exists(energy_output) == False):
            print '\n    .... Oops NOTICE: There is NO '+ energy_output +' file !?!?!?    \n'    

        s = i-(NoP+1)/2
        r = 2*mdr*s/(NoP-1)
        if (s==0): r=0.00001

        if (r>0):
            strain ='+'+str(round(r,10))
        else:
            strain =    str(round(r,10))

        for line in open(energy_output, 'r'):
            if (line.find(':ENE  :')>=0):
                energy = float(line.split()[-1])

        print >>fee, strain,'   ', energy
        os.chdir('../')

    fee.close()

    si, ei = np.loadtxt('energy-vs-strain.dat').T
    vs = sorted([zip(si, ei)])
    s, e = np.array(vs).T
    if (len(e) < 5):
        sys.exit('\n    .... Oops SORRY: 4th order polynomial fit needs at least 5 points.\n')

    #%!%!%!%!--- FIT CALCULATIONS ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    coeffitions = np.polyfit(si, ei, 4)
    f4 = np.poly1d(coeffitions)

    s_fit = np.linspace(mdr*-1.2, mdr*1.2, 1000)
    e_fit = f4(s_fit)
    s_min = s_fit[e_fit.argmin()]
    e_min = e_fit[e_fit.argmin()]
    
    #%!%--- Writing the 'mod-optimized.struct' file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    def_matrix={\
    'BOA'  :[[(1+s_min)**-.5 , 0.             , 0.             ],
             [ 0.            , 1.+s_min       , 0.             ],
             [ 0.            , 0.             ,(1+s_min)**-.5  ]],\

    'COA'  :[[(1+s_min)**-.5 , 0.             , 0.             ],
             [ 0.            , (1+s_min)**-.5 , 0.             ],
             [ 0.            , 0.             , 1.+s_min       ]],\

    'ALPHA':[[1./(1-s_min**2), 0.             , 0.             ],
             [ 0.            , 1.             ,s_min           ],
             [ 0.            ,s_min           , 1.             ]],\

    'BETA' :[[ 1.            , 0.             ,s_min           ],
             [ 0.            , 1./(1-s_min**2), 0.             ],
             [s_min          , 0.             , 1.             ]],\

    'GAMMA':[[ 1.            ,s_min           , 0.             ],
             [s_min          , 1.             , 0.             ],
             [ 0.            , 0.             , 1./(1-s_min**2)]]}
        
    M_min = np.array(def_matrix[mod])
    M_new = dot(M_old, M_min)
    #--- Calculating the distorted lattice parameters and angles ----------------------------------
    A1    = sqrt(M_new[0,0]**2. + M_new[0,1]**2. + M_new[0,2]**2.)
    A2    = sqrt(M_new[1,0]**2. + M_new[1,1]**2. + M_new[1,2]**2.)
    A3    = sqrt(M_new[2,0]**2. + M_new[2,1]**2. + M_new[2,2]**2.)

    ALPHA = degrees(acos((M_new[1,0]*M_new[2,0] + \
                          M_new[1,1]*M_new[2,1] + \
                          M_new[1,2]*M_new[2,2])/(A2*A3)))
    BETA  = degrees(acos((M_new[0,0]*M_new[2,0] + \
                          M_new[0,1]*M_new[2,1] + \
                          M_new[0,2]*M_new[2,2])/(A1*A3)))
    GAMMA = degrees(acos((M_new[0,0]*M_new[1,0] + \
                          M_new[0,1]*M_new[1,1] + \
                          M_new[0,2]*M_new[1,2])/(A1*A2)))
    #----------------------------------------------------------------------------------------------

    fo = open(mod.lower()+'-optimized.struct', 'w')

    Plins.pop(0)
    Plins.insert(0, mod.lower()+' optimized structure\n')

    Plins.pop(3)
    Lattice_Parameters = '%10.6f'%(A1)   +'%10.6f'%(A2)  +'%10.6f'%(A3)\
                       + '%10.6f'%(ALPHA)+'%10.6f'%(BETA)+'%10.6f'%(GAMMA)
    Plins.insert(3, Lattice_Parameters+'\n')

    for i in range(len(Plins)):
        print>>fo, Plins[i],
    fo.close()
    print '\n     Optimized lattice parameters saved into "'+mod.lower()+'-optimized.struct" file.\n'
    #----------------------------------------------------------------------------------------------

#%!%!%--- PLOT SECTION ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
fig = plt.figure()
ax  = fig.add_subplot(111)
fig.subplots_adjust(left=0.20)

if (mod == 'VOL'):

    if (eos=='M'):
        fit_label = 'Murnaghan eos'
    else:
        fit_label = 'Birch-Murnaghan eos'

    xlabel = u'Volume [Bohr\u00B3]'
    ylabel = 'Energy [Ryd]'

    plt.text(0.3,0.75, 'E$_{min}$ = '+str(round(E0,7))+' [Ryd]'        , transform = ax.transAxes)
    plt.text(0.3,0.70, 'V$_{min}$ = '+str(round(V0,4))+u' [Bohr\u00B3]', transform = ax.transAxes)
    plt.text(0.3,0.65, 'B$_0$ = '+str(round(B0*ToGPa,3))+' [GPa]'      , transform = ax.transAxes)
    plt.text(0.3,0.60, 'B$^\prime$  = '+str(round(Bp,3))               , transform = ax.transAxes)

    vmn  = min(min(vi), V0)
    vmx  = max(max(vi), V0)
    dv   = vmx - vmn
    v_eos= np.linspace(vmn-(0.1*dv), vmx+(0.1*dv), 1000)
    e_eos= E_eos(p1, v_eos)

    xx = [] ; xx = v_eos
    yy = [] ; yy = e_eos
    x0 = [] ; x0 = vi
    y0 = [] ; y0 = ei

if (mod != 'VOL'):
    xlabel    = 'Physical strain $\epsilon$'
    ylabel    = 'Energy [Ryd]'
    fit_label = '4th order polynomial fit'

    plt.text(0.3,0.75, 'E$_{min}$ = '+str(round(e_min, 7))+' [Ryd]', transform = ax.transAxes)
    plt.text(0.3,0.70, '$\epsilon_{min}$  = '+str(round(s_min,5))  , transform = ax.transAxes)

    xx = [] ; xx = s_fit
    yy = [] ; yy = e_fit
    x0 = [] ; x0 = si
    y0 = [] ; y0 = ei

ax.set_xlabel(xlabel, fontsize = 18)
ax.set_ylabel(ylabel, fontsize = 18)

ax.plot(xx, yy, 'k'               ,
                color     = 'red' ,
                linewidth = 2     ,
                label     = fit_label)

ax.plot(x0, y0, 'o'                     ,
                color          = 'green',
                markersize     = 8      ,
                markeredgecolor= 'black',
                markeredgewidth= 1      ,
                label          = 'DFT Calc.')
ax.legend(numpoints=1,loc=9)

for label in ax.xaxis.get_ticklabels(): label.set_fontsize(15)
for label in ax.yaxis.get_ticklabels(): label.set_fontsize(15)
for line in ax.get_xticklines() + ax.get_yticklines():
    line.set_markersize(6)
    line.set_markeredgewidth(2)

pyl.grid(True)

ax.xaxis.set_major_locator(MaxNLocator(7))

max_y = max(max(yy), max(y0))
min_y = min(min(yy), min(y0))

max_x = max(max(xx), max(x0))
min_x = min(min(xx), min(x0))

dyy = (max_y-min_y)/15
ax.set_ylim(min_y-dyy,max_y+dyy)
dxx = (max_x-min_x)/18
ax.set_xlim(min_x-dxx,max_x+dxx)

if (mod == 'VOL'):
    plt.savefig(eos+'_eos.png', orientation='portrait',format='png',dpi=300)
    plt.savefig(eos+'_eos.eps', orientation='portrait',format='eps')
else:
    plt.savefig(mod.lower()+'.png', orientation='portrait',format='png',dpi=300)
    plt.savefig(mod.lower()+'.eps', orientation='portrait',format='eps')

plt.show()
#--------------------------------------------------------------------------------------------------
