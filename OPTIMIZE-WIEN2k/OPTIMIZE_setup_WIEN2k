#!/usr/bin/env python
#%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
#%!%!% ------------------------------- OPTIMIZE_setup_WIEN2k ------------------------------- %!%!%#
#%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
#
# AUTHOR:
# Rostam Golesorkhtabar  
# r.golesorkhtabar@gmail.com
# 
# DATE:
# Sun Jan 01 00:00:00 2012
#
# SYNTAX:
# python OPTIMIZE_setup_WIEN2k.py
#        OPTIMIZE_setup_WIEN2k
# 
# EXPLANATION:
# 
#__________________________________________________________________________________________________

from sys   import stdin
from numpy import *
from math  import *
import numpy as np
import os.path
import shutil
import math
import sys
import os

#%!%!%--- Dictionaries ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
Def_matrix = {\
'VOL'  :
'\n[ 1+eps  0      0     ]'   \
'\n[ 0      1+eps  0     ]'   \
'\n[ 0      0      1+eps ]\n',\

'BOA'  :
'\n[(1+eps)^-.5   0           0          ]'   \
'\n[ 0           (1+eps)^+1.  0          ]'   \
'\n[ 0            0          (1+eps)^-.5 ]\n',\

'COA'  :
'\n[(1+eps)^-.5   0           0          ]'   \
'\n[ 0           (1+eps)^-.5  0          ]'   \
'\n[ 0            0          (1+eps)^+1. ]\n',\

'ALPHA':
'\n[ 1/(1-eps^2)  0           0          ]'   \
'\n[ 0            1          eps         ]'   \
'\n[ 0           eps          1          ]\n',\

'BETA' :
'\n[ 1           0           eps         ]'   \
'\n[ 0           1/(1-eps^2)  0          ]'   \
'\n[eps          0            1          ]\n',\

'GAMMA':
'\n[ 1          eps           0          ]'   \
'\n[eps          1            0          ]'   \
'\n[ 0           0            1/(1-eps^2)]\n'}

LC_Dic = {              \
'CI' :'Cubic I'        ,\
'CII':'Cubic II'       ,\
'HI' :'Hexagonal I'    ,\
'HII':'Hexagonal II'   ,\
'RI' :'Rhombohedral I' ,\
'RII':'Rhombohedral II',\
'TI' :'Tetragonal I'   ,\
'TII':'Tetragonal II'  ,\
'O'  :'Orthorhombic'   ,\
'M'  :'Monoclinic'     ,\
'N'  :'Triclinic'} 
#--------------------------------------------------------------------------------------------------

#%!%!%--- Checking the "case.struct" file exist ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
path       = os.getcwd()
dir_name   = os.path.basename(path)
case_struct= dir_name+'.struct'
if (os.path.exists(case_struct) == False):
    sys.exit('\n     .... Oops ERROR: There is NO '+ case_struct +' file !?!?!?\n')
#--------------------------------------------------------------------------------------------------

#%!%!%--- Calculating the Space-Group Number and classifying it ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
os.system('sgroup -wien '+ case_struct +' sgroup.out')
sgroup_out = 'sgroup.out'

SGf   = open(sgroup_out, 'r')
SGlins= SGf.readlines()
SGf.close()

if (SGlins[0].find('warning') >= 0): 
    sys.exit('\n     .... Oops WARNING: There is a warning in "'+ sgroup_out +'" file !?!?!?\n')

for i in range(len(SGlins)):
    if (SGlins[i].find('Number and name of space group:') >= 0):
        SGN = int(float(SGlins[i].split()[6]))
        SGN_explanation=SGlins[i].strip()
        break

if (1 <= SGN and SGN <= 2):      # Triclinic
    LC = 'N'

elif(3 <= SGN and SGN <= 15):    # Monoclinic
    LC = 'M'

elif(16 <= SGN and SGN <= 74):   # Orthorhombic
    LC = 'O'

elif(75 <= SGN and SGN <= 88):   # Tetragonal II
    LC = 'TII'
  
elif(89 <= SGN and SGN <= 142):  # Tetragonal I
    LC = 'TI'

elif(143 <= SGN and SGN <= 148): # Rhombohedral II 
    LC = 'RII'

elif(149 <= SGN and SGN <= 167): # Rhombohedral I
    LC = 'RI'

elif(168 <= SGN and SGN <= 176): # Hexagonal II
    LC = 'HII'

elif(177 <= SGN and SGN <= 194): # Hexagonal I
    LC = 'HI'

elif(195 <= SGN and SGN <= 206): # Cubic II
    LC = 'CII'

elif(207 <= SGN and SGN <= 230): # Cubic I
    LC = 'CI'

else: sys.exit('\n     .... Oops ERROR: WRONG Space-Group Number !?!?!?    \n')

print '\n     '+ SGN_explanation +'\
       \n     '+ LC_Dic[LC] +' structure in the Laue classification.'

os.system('rm -f :log *outputsgroup* *struct_sgroup')
#--------------------------------------------------------------------------------------------------

#%!%!%--- Read optimization type ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
if (LC=='CI' or LC=='CII'):
    dirn = 'VOL'
    print

if (LC=='HI' or\
    LC=='HII'or\
    LC=='RI' or\
    LC=='RII'or\
    LC=='TI' or\
    LC=='TII'):
    print '\n     Which parameter would you like to optimize?'\
          '\n     1 ... volume                               '\
          '\n     2 ... c/a ratio with constant volume       '
    num = input(">>>> Please choose '1' or '2': ")
    if (num != 1 and num != 2):
        sys.exit("\n     .... Oops ERROR: Choose '1' or '2' \n")
    if (num == 1 ): dirn = 'VOL'
    if (num == 2 ): dirn = 'COA'

if (LC=='O'):
    print '\n     Which parameter would you like to optimize?'\
          '\n     1 ... volume                               '\
          '\n     2 ... b/a ratio with constant volume       '\
          '\n     3 ... c/a ratio with constant volume       '
    num = input(">>>> Please choose '1' or '2' or '3': ")
    if (num != 1 and num != 2 and num != 3):
        sys.exit("\n     .... Oops ERROR: Choose '1' or '2' or '3'\n")
    if (num == 1 ): dirn = 'VOL'
    if (num == 2 ): dirn = 'BOA'
    if (num == 3 ): dirn = 'COA'

if (LC=='M'):
    print '\n     Which parameter would you like to optimize?'\
          '\n     1 ... volume                               '\
          '\n     2 ... b/a ratio with constant volume       '\
          '\n     3 ... c/a ratio with constant volume       '\
          '\n     4 ... gamma angle with constant volume     '
    num = input(">>>> Please choose '1' or '2' or '3' or '4': ")
    if (num != 1 and num != 2 and num != 3 and num != 4):
        sys.exit("\n     .... Oops ERROR: Choose '1' or '2' or '3' or '4'\n")
    if (num == 1 ): dirn = 'VOL'
    if (num == 2 ): dirn = 'BOA'
    if (num == 3 ): dirn = 'COA'
    if (num == 4 ): dirn = 'GAMMA'

if (LC=='N'):
    print '\n     Which parameter would you like to optimize?'\
          '\n     1 ... volume                               '\
          '\n     2 ... b/a ratio with constant volume       '\
          '\n     3 ... c/a ratio with constant volume       '\
          '\n     4 ... alpha angle with constant volume     '\
          '\n     5 ... beta  angle with constant volume     '\
          '\n     6 ... gamma angle with constant volume     '
    num = input(">>>> Please choose '1' or '2' or '3' or '4' or '5' or '6': ")
    if (num != 1 and num != 2 and num != 3 and num != 4 and num != 5 and num != 6):
        sys.exit("\n     .... Oops ERROR: Choose '1' or '2' or '3' or '4' or '5' or '6'\n")
    if (num == 1 ): dirn = 'VOL'
    if (num == 2 ): dirn = 'BOA'
    if (num == 3 ): dirn = 'COA'
    if (num == 4 ): dirn = 'ALPHA'
    if (num == 5 ): dirn = 'BATA'
    if (num == 6 ): dirn = 'GAMMA'
#--------------------------------------------------------------------------------------------------

#%!%!%--- Reading the case.struct file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
INF   = open(case_struct,'r')
lines = INF.readlines()
title = lines[0][ 0:80].strip()
Ltype = lines[1][ 0: 3].strip()
mode  = lines[2][13:17].strip()
unit  = lines[2][23:27].strip()
NAT_L = int(lines[1][27:30])

if (Ltype!='P'   and \
    Ltype!='B'   and \
    Ltype!='F'   and \
    Ltype!='H'   and \
    Ltype!='R'   and \
    Ltype!='CXY' and \
    Ltype!='CXZ'):
    sys.exit('\n     .... Oops ERROR: WRONG lattice type, Check the "'+case_struct+'" file !?!?!?\n')

a1    = float(lines[3][ 0:10])
a2    = float(lines[3][10:20])
a3    = float(lines[3][20:30])
alpha = float(lines[3][30:40])
beta  = float(lines[3][40:50])
gamma = float(lines[3][50:60])

if (Ltype == 'H'): 
    gamma  = 120.0
    Ltype  = 'P'
 
if (Ltype == 'R'):
    a_R    = sqrt((a3**2.)/9. + (a1**2.)/3.)
    alpha_R= 2.*asin(a1/(2.*a_R))
    a1     = a_R
    a2     = a_R
    a3     = a_R
    alpha  = degrees(alpha_R)
    beta   = degrees(alpha_R)
    gamma  = degrees(alpha_R)
    Ltype  = 'P'

dummy1 = []
for line in lines:
    if (line.find('MULT=') >= 0): 
        l     = line
        MULT  = int(l[15:17])
        ISPLIT= int(l[34:36])
        dummy1.append([MULT, ISPLIT])

dummy2 = []
for line in lines:
    if (line.find('NPT=') >= 0):
        l     = line
        Aname = l[0:10]
        NPT   = float(l[15:20])
        R0    = float(l[25:35])
        RMT   = float(l[40:50])
        Z     = float(l[55:60])
        dummy2.append([Aname, NPT, R0, RMT, Z])

dummy3 = []
nl     = -1
for line in lines:
    nl += 1
    if (line.find('LOCAL ROT MATRIX:    ') >= 0):
        rotm1 = lines[nl+0][20:41] + lines[nl+0][41:51].strip()
        rotm2 = lines[nl+1][20:41] + lines[nl+1][41:51].strip()
        rotm3 = lines[nl+2][20:41] + lines[nl+2][41:51].strip()
        dummy3.append([rotm1, rotm2, rotm3])

INFO_L = []
for i in range(NAT_L):
    INFO_L.append(dummy1[i] + dummy2[i] + dummy3[i])

POSN_L = []
for line in lines:
    if (line.find('X=') >= 0):
        l = line
        X = float(l[12:22])
        Y = float(l[25:35])
        Z = float(l[38:48])
        POSN_L.append([X, Y, Z])

INF.close()
#--------------------------------------------------------------------------------------------------

#%!%!%--- Preparing the atomic positions of the primitive cell ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
if (Ltype == 'P'  ): NAT_P = NAT_L*1
if (Ltype == 'B'  ): NAT_P = NAT_L*2
if (Ltype == 'F'  ): NAT_P = NAT_L*4
if (Ltype == 'CXY'): NAT_P = NAT_L*2
if (Ltype == 'CXZ'): NAT_P = NAT_L*2

bgn    = 0
infl   = []
INFO_P = []
POSN_P = []
for i in range(NAT_L):
    infl = INFO_L[i]
    numa = INFO_L[i][0]
    end  = bgn + numa
    posl = []
    for j in range(bgn, end):
        posl.append(POSN_L[j])
    bgn = end

    if (Ltype == 'P'):
        T = [[.0, .0, .0]]
    if (Ltype == 'B'):
        T = [[.0, .0, .0],
             [.5, .5, .5]]
    if (Ltype == 'F'):
        T = [[.0, .0, .0],
             [.5, .5, .0],
             [.5, .0, .5],
             [.0, .5, .5]]
    if (Ltype == 'CXY'):
        T = [[.0, .0, .0],
             [.5, .5, .0]]
    if (Ltype == 'CXZ'):
        T = [[.0, .0, .0],
             [.5, .0, .5]]

    for j in range(len(T)):
        INFO_P.append(infl)
        for k in range(len(posl)):
            POSN_P.append([(T[j][0]+posl[k][0])%1, (T[j][1]+posl[k][1])%1, (T[j][2]+posl[k][2])%1])
#--------------------------------------------------------------------------------------------------

#%!%!%--- Directory management ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
if (os.path.exists(dirn+'_old')):
    shutil.rmtree( dirn+'_old')

if (os.path.exists(dirn)):
    os.rename(dirn,dirn+'_old')

os.mkdir(dirn)
os.chdir(dirn)
#--------------------------------------------------------------------------------------------------

#%!%!%--- Writing the case_P.struct file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
fP = open(dir_name+'_P.struct', 'w')
print>>fP, title
print>>fP, 'P   LATTICE,NONEQUIV.ATOMS:'+'%3d'%(NAT_P)
print>>fP, 'MODE OF CALC='+mode+' unit='+unit
print>>fP, '%10.6f'%(a1)   +'%10.6f'%(a2)  +'%10.6f'%(a3) + \
           '%10.6f'%(alpha)+'%10.6f'%(beta)+'%10.6f'%(gamma)

if (LC == 'CI' or\
    LC == 'CII'):
    index = ' '
else:
    index = '-'

bgn = 0
for i in range(len(INFO_P)):
    if ( 1 <= i+1 and i+1 <=   9): atom_index ='  '+index+str(i+1)
    if (10 <= i+1 and i+1 <=  99): atom_index = ' '+index+str(i+1)
    if (99 <= i+1 and i+1 <= 999): atom_index =     index+str(i+1)

    numa= INFO_P[i][0]
    end = bgn + numa
    for j in range(bgn, end):
        print>>fP, 'ATOM'+atom_index+': X='+'%10.8f'%(POSN_P[j][0]) + \
                                      ' Y='+'%10.8f'%(POSN_P[j][1]) + \
                                      ' Z='+'%10.8f'%(POSN_P[j][2])
        if (j == bgn): print>>fP, '          MULT='  +'%2d'%(INFO_P[i][0]) + \
                                  '          ISPLIT='+'%2d'%(INFO_P[i][1])
    bgn = end

    print>>fP, INFO_P[i][2]+' NPT='+'%5d'  %(INFO_P[i][3]) + \
                           '  R0='+'%10.8f'%(INFO_P[i][4]) + \
                           ' RMT='+'%10.5f'%(INFO_P[i][5]) + \
                           '   Z:'+'%7.2f' %(INFO_P[i][6])
    print>>fP, 'LOCAL ROT MATRIX:   '+INFO_P[i][7]
    print>>fP, '                    '+INFO_P[i][8]
    print>>fP, '                    '+INFO_P[i][9]
print>>fP, '   0      NUMBER OF SYMMETRY OPERATIONS'
fP.close()
#--------------------------------------------------------------------------------------------------

#%!%!%--- Reading the maximum Lagrangian strain and number of distorted structures ---%!%!%!%!%!%!%
mdr = input('>>>> Please enter the maximum Physical strain value  '\
          '\n     The suggested value is between 0.001 and 0.050: ')

if (1 < mdr or mdr < 0):
    sys.exit('\n     .... Oops ERROR: The maximum Physical strain is OUT of range !!!!!!\n')

mdr = round(mdr, 4)
print '     The maximum Lagrangian strain is '+ str(mdr) + '\n'

NoP = input('>>>> Please enter the number of the distorted structures [odd number > 4]: ')
NoP = int(abs(NoP))

if (NoP < 5):
    sys.exit('\n     .... Oops ERROR: The NUMBER of the distorted structures < 5 !!!!!!    \n')
if (99 < NoP):
    sys.exit('\n     .... Oops ERROR: The NUMBER of the distorted structures > 99 !!!!!!   \n')

if (NoP%2 == 0):
    NoP   += 1
print '     The number of the distorted structures is '+ str(NoP) + '\n'

ptn = int((NoP-1)/2)

if (mdr/ptn <= 0.00001):
    sys.exit('     .... Oops ERROR: The interval of the strain values is < 0.00001'\
           '\n                 Choose a larger maximum Lagrangian strain     '\
           '\n                 or a less number of distorted structures.   \n')
#--------------------------------------------------------------------------------------------------

#%!%!%--- Making the INFO file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
INFO = open('INFO_'+ dirn , 'w')
print >>INFO, 'Space-group number              =', SGN       ,\
            '\nStructure type                  =', LC_Dic[LC],\
            '\nMaximum Physical strain         =', mdr       ,\
            '\nNumber of distorted structures  =', NoP
INFO.close
#--------------------------------------------------------------------------------------------------

#%!%!%--- Making the M_old matrix ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
alpha = radians(alpha)
beta  = radians(beta)
gamma = radians(gamma)

M_old = zeros((3,3))

if (LC == 'CI'  or \
    LC == 'CII' or \
    LC == 'TI'  or \
    LC == 'TII' or \
    LC == 'O'):

    M_old[0,0] = a1
    M_old[0,1] = 0.
    M_old[0,2] = 0.

    M_old[1,0] = 0.
    M_old[1,1] = a2
    M_old[1,2] = 0.

    M_old[2,0] = 0.
    M_old[2,1] = 0.
    M_old[2,2] = a3


if (LC == 'HI' or \
    LC == 'HII'):

    M_old[0,0] = a1*sqrt(3.)/2.
    M_old[0,1] =-a1/2.
    M_old[0,2] = 0.

    M_old[1,0] = 0.
    M_old[1,1] = a2
    M_old[1,2] = 0.

    M_old[2,0] = 0.
    M_old[2,1] = 0.
    M_old[2,2] = a3


if (LC == 'RI' or \
    LC == 'RII'):
    if (SGN == 146 or \
        SGN == 148 or \
        SGN == 155 or \
        SGN == 160 or \
        SGN == 161 or \
        SGN == 166 or \
        SGN == 167 ):

        M_old[0,0] = a1*sin(alpha/2.)
        M_old[0,1] =-a1*sin(alpha/2.)/sqrt(3.)
        M_old[0,2] = a1*sqrt(1.-(4./3.*(sin(alpha/2.))**2.))

        M_old[1,0] = 0.
        M_old[1,1] =-M_old[0,1]*2.
        M_old[1,2] = M_old[0,2]

        M_old[2,0] =-M_old[0,0]
        M_old[2,1] = M_old[0,1]
        M_old[2,2] = M_old[0,2]

    else:
        M_old[0,0] = a1*sqrt(3.)/2.
        M_old[0,1] =-a1/2.
        M_old[0,2] = 0.

        M_old[1,0] = 0.
        M_old[1,1] = a2
        M_old[1,2] = 0.

        M_old[2,0] = 0.
        M_old[2,1] = 0.
        M_old[2,2] = a3


if (LC == 'M'):
    M_old[0,0] = a1*sin(gamma)
    M_old[0,1] = a1*cos(gamma)
    M_old[0,2] = 0.

    M_old[1,0] = 0.
    M_old[1,1] = a2
    M_old[1,2] = 0.

    M_old[2,0] = 0.
    M_old[2,1] = 0.
    M_old[2,2] = a3


if (LC == 'N'):
    M_old[0,0] = a1
    M_old[0,1] = 0.
    M_old[0,2] = 0.

    M_old[1,0] = a2*cos(gamma)
    M_old[1,1] = a2*sin(gamma)
    M_old[1,2] = 0.  

    M_old[2,0] = a3*cos(beta)
    M_old[2,1] =(a3*(cos(alpha)-cos(beta)*cos(gamma)))/sin(gamma)    
    M_old[2,2] = a3*sqrt(1.-(cos(alpha))**2.-(cos(beta))**2.-(cos(gamma))**2. \
               + 2.*cos(alpha)*cos(beta)*cos(gamma))/sin(gamma)

D = np.linalg.det(M_old)
if (Ltype == 'P'  ): V0 = D/1.
if (Ltype == 'B'  ): V0 = D/2.
if (Ltype == 'F'  ): V0 = D/4.
if (Ltype == 'CXY'): V0 = D/2.
if (Ltype == 'CXZ'): V0 = D/2.
#--------------------------------------------------------------------------------------------------

#%!%!%--- Making the deformed structure file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
fP   = open(dir_name+'_P.struct', 'r')
Plins= fP.readlines()
fP.close()

fdis = open(dirn.lower()+'_Parameters', 'w')
print >>fdis,dirn+', Deformation Matrix = ' + Def_matrix[dirn]

cont= 0
for s in range(-ptn, ptn+1):
    r = mdr*s/ptn
    if (s==0): r = 0.00001
    eps = r
    def_matrix={\
    'VOL'  :[[1.+eps      , 0.          , 0.         ],
             [0.          , 1.+eps      , 0.         ],
             [0.          , 0.          , 1+eps      ]],\

    'BOA'  :[[(1+eps)**-.5, 0.          , 0.         ],
             [ 0.         , 1.+eps      , 0.         ],
             [ 0.         , 0.          ,(1+eps)**-.5]],\

    'COA'  :[[(1+eps)**-.5, 0.          , 0.         ],
             [ 0.         , (1+eps)**-.5, 0.         ],
             [ 0.         , 0.          , 1.+eps     ]],\

    'ALPHA':[[1./(1-eps**2), 0.           , 0.           ],
             [ 0.          , 1.           ,eps           ],
             [ 0.          ,eps           , 1.           ]],\

    'BETA' :[[ 1.          , 0.           ,eps           ],
             [ 0.          , 1./(1-eps**2), 0.           ],
             [eps          , 0.           , 1.           ]],\

    'GAMMA':[[ 1.          ,eps           , 0.           ],
             [eps          , 1.           , 0.           ],
             [ 0.          , 0.           , 1./(1-eps**2)]]}
        
    M_eps = np.array(def_matrix[dirn])
    M_new = dot(M_old, M_eps)
    #--- Calculating the distorted lattice parameters and angles ----------------------------------
    A1    = sqrt(M_new[0,0]**2. + M_new[0,1]**2. + M_new[0,2]**2.)
    A2    = sqrt(M_new[1,0]**2. + M_new[1,1]**2. + M_new[1,2]**2.)
    A3    = sqrt(M_new[2,0]**2. + M_new[2,1]**2. + M_new[2,2]**2.)

    ALPHA = degrees(acos((M_new[1,0]*M_new[2,0] + \
                          M_new[1,1]*M_new[2,1] + \
                          M_new[1,2]*M_new[2,2])/(A2*A3)))
    BETA  = degrees(acos((M_new[0,0]*M_new[2,0] + \
                          M_new[0,1]*M_new[2,1] + \
                          M_new[0,2]*M_new[2,2])/(A1*A3)))
    GAMMA = degrees(acos((M_new[0,0]*M_new[1,0] + \
                          M_new[0,1]*M_new[1,1] + \
                          M_new[0,2]*M_new[1,2])/(A1*A2)))
    #----------------------------------------------------------------------------------------------
    cont += 1
    if (cont < 10):
        dirn_num = dirn.lower() + '_0'+str(cont)
    else:
        dirn_num = dirn.lower() + '_' +str(cont)

    print>>fdis, dirn_num + \
           ',  eps = '+'%13.10f'%(eps)+','+'%12.6f'%(A1)   +'%12.6f'%(A2)  +'%12.6f'%(A3)+\
                                           '%12.6f'%(ALPHA)+'%12.6f'%(BETA)+'%12.6f'%(GAMMA)

    os.mkdir(dirn_num)
    os.chdir(dirn_num)
    #--- Writing the structure file ---------------------------------------------------------------
    fo = open(dirn_num + '.struct', 'w')

    Plins.pop(0)
    Plins.insert(0, dirn_num+'\n')

    Plins.pop(3)
    Lattice_Parameters = '%10.6f'%(A1)   +'%10.6f'%(A2)  +'%10.6f'%(A3)\
                       + '%10.6f'%(ALPHA)+'%10.6f'%(BETA)+'%10.6f'%(GAMMA)
    Plins.insert(3, Lattice_Parameters+'\n')

    for i in range(len(Plins)):
        print>>fo, Plins[i],
    fo.close()
    #----------------------------------------------------------------------------------------------
    os.chdir('../')
    #----------------------------------------------------------------------------------------------
print>>fdis,'\n   Distorted parameters: END'
fdis.close()

os.mkdir(dirn.lower()+'-struct')
os.system('cp -f */*_??.struct '+dirn.lower()+'-struct/')
os.system('mv -f '+ dir_name +'_P.struct '+dirn.lower()+'-struct/')
os.chdir('../')
#--------------------------------------------------------------------------------------------------
