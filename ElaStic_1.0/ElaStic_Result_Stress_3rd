#!/usr/bin/env python
#c%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!#
#%!%!% ----------------------------- ElaStic_Result_Stress_3rd ----------------------------- %!%!%#
#c%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!#
#
# AUTHORS:
# Rostam Golesorkhtabar
# r.golesorkhtabar@gmail.com
# 
# DATE:
# Sun Jan 01 00:00:00 2012
#
# SYNTAX:
# python ElaStic_Result_Stress_3rd.py
#        ElaStic_Result_Stress_3rd
#
# EXPLANATION:
# 
#__________________________________________________________________________________________________

from sys   import stdin
from numpy import *
import numpy as np
import subprocess
import os.path
import shutil
import math
import time
import sys
import os

#%!%!%--- DICTIONARIES ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
head = {\
'CI':'\
    for, space-group number between 207 and 230, Cubic I structure.               \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
    111 112 112  0   0   0      112 112 123  0   0   0      112 123 112  0   0   0  \n\
    112 112 123  0   0   0      112 111 112  0   0   0      123 112 112  0   0   0  \n\
    112 123 112  0   0   0      123 112 112  0   0   0      112 112 111  0   0   0  \n\
     0   0   0  144  0   0       0   0   0  155  0   0       0   0   0  155  0   0  \n\
     0   0   0   0  155  0       0   0   0   0  144  0       0   0   0   0  155  0  \n\
     0   0   0   0   0  155      0   0   0   0   0  155      0   0   0   0   0  144 \n\
                                                                                    \n\
    %%%%%%%% 4-ij %%%%%%%%      %%%%%%%% 5-ij %%%%%%%%      %%%%%%%% 6-ij %%%%%%%%  \n\
     0   0   0  144  0   0       0   0   0   0  155  0       0   0   0   0   0  155 \n\
     0   0   0  155  0   0       0   0   0   0  144  0       0   0   0   0   0  155 \n\
     0   0   0  155  0   0       0   0   0   0  155  0       0   0   0   0   0  144 \n\
    144 155 155  0   0   0       0   0   0   0   0  456      0   0   0   0  456  0  \n\
     0   0   0   0   0  456     155 144 155  0   0   0       0   0   0  456  0   0  \n\
     0   0   0   0  456  0       0   0   0  456  0   0      155 155 144  0   0   0  \n',\
'CII':'\
    for, space-group number between 195 and 206, Cubic II structure.              \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
    111 112 113  0   0   0      112 112 123  0   0   0      112 123 112  0   0   0  \n\
    112 113 123  0   0   0      112 111 112  0   0   0      123 112 112  0   0   0  \n\
    113 123 112  0   0   0      123 112 113  0   0   0      112 112 111  0   0   0  \n\
     0   0   0  144  0   0       0   0   0  166  0   0       0   0   0  155  0   0  \n\
     0   0   0   0  155  0       0   0   0   0  144  0       0   0   0   0  166  0  \n\
     0   0   0   0   0  166      0   0   0   0   0  155      0   0   0   0   0  144 \n\
                                                                                    \n\
    %%%%%%%% 4-ij %%%%%%%%      %%%%%%%% 5-ij %%%%%%%%      %%%%%%%% 6-ij %%%%%%%%  \n\
     0   0   0  144  0   0       0   0   0   0  155  0       0   0   0   0   0  155 \n\
     0   0   0  155  0   0       0   0   0   0  144  0       0   0   0   0   0  155 \n\
     0   0   0  155  0   0       0   0   0   0  155  0       0   0   0   0   0  144 \n\
    144 155 155  0   0   0       0   0   0   0   0  456      0   0   0   0  456  0  \n\
     0   0   0   0   0  456     155 144 155  0   0   0       0   0   0  456  0   0  \n\
     0   0   0   0  456  0       0   0   0  456  0   0      155 155 144  0   0   0  \n',\
'HI':'\
    for, space-group number between 177 and 194, Hexagonal I structure.           \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
    111 112 113  0   0   0      112  A  123  0   0   0      113 123 133  0   0   0  \n\
    112  A  123  0   0   0       A  222 113  0   0   0      123 113 133  0   0   0  \n\
    113 123 133  0   0   0      123 113 133  0   0   0      133 133 333  0   0   0  \n\
     0   0   0  144  0   0       0   0   0  155  0   0       0   0   0  344  0   0  \n\
     0   0   0   0  155  0       0   0   0   0  144  0       0   0   0   0  344  0  \n\
     0   0   0   0   0   B       0   0   0   0   0   C       0   0   0   0   0   D  \n\
                                                                                    \n\
    %%%%%%%% 4-ij %%%%%%%%      %%%%%%%% 5-ij %%%%%%%%      %%%%%%%% 6-ij %%%%%%%%  \n\
     0   0   0  144  0   0       0   0   0   0  155  0       0   0   0   0   0   B  \n\
     0   0   0  155  0   0       0   0   0   0  144  0       0   0   0   0   0   C  \n\
     0   0   0  344  0   0       0   0   0   0  344  0       0   0   0   0   0   D  \n\
    144 155 344  0   0   0       0   0   0   0   0   E       0   0   0   0   E   0  \n\
     0   0   0   0   0   E      155 144 344  0   0   0       0   0   0   E   0   0  \n\
     0   0   0   0   E   0       0   0   0   E   0   0       B   C   D   0   0   0  \n\
                                                                                    \n\
    A = 111 - 222 + 112                                                             \n\
    B = 3/4 * 222 - 1/2 * 111 - 1/4 * 112                                           \n\
    C = 1/2 * 111 - 1/4 * 222 - 1/4 * 112                                           \n\
    D = 1/2 * ( 113 - 123 )                                                         \n\
    E = 1/2 * ( 155 - 144 )                                                         \n',\
'HII':'\
    for, space-group number between 168 and 176, Hexagonal II structure.          \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
    111 112 113  0   0  116     112  A  123  0   0   0      113 123 133  0   0   0  \n\
    112  A  123  0   0 -116      A  222 113  0   0  116     123 113 133  0   0   0  \n\
    113 123 133  0   0   0      123 113 133  0   0   0      133 133 333  0   0   0  \n\
     0   0   0  144 145  0       0   0   0  155-145  0       0   0   0  344  0   0  \n\
     0   0   0  145 155  0       0   0   0 -145 144  0       0   0   0   0  344  0  \n\
    116-116  0   0   0   B       0  116  0   0   0   C       0   0   0   0   0   D  \n\
                                                                                    \n\
    %%%%%%%%% 4-ij %%%%%%%%     %%%%%%%%% 5-ij %%%%%%%%     %%%%%%%%% 6-ij %%%%%%%% \n\
     0   0   0  144  0   0       0   0   0   0  155  0       0   0   0   0   0   B  \n\
     0   0   0  155  0   0       0   0   0   0  144  0       0   0   0   0   0   C  \n\
     0   0   0  344  0   0       0   0   0   0  344  0       0   0   0   0   0   D  \n\
    144 155 344  0   0  145      0   0   0   0   0   E       0   0   0   0   E   0  \n\
     0   0   0   0   0   E      155 144 344  0   0 -145      0   0   0   E   0   0  \n\
     0   0   0  145  E   0       0   0   0   E -145  0       B   C   D   0   0 -116 \n\
                                                                                    \n\
    A = 111 - 222 + 112                                                             \n\
    B = 3/4 * 222 - 1/2 * 111 - 1/4 * 112                                           \n\
    C = 1/2 * 111 - 1/4 * 222 - 1/4 * 112                                           \n\
    D = 1/2 * ( 113 - 123 )                                                         \n\
    E = 1/2 * ( 155 - 144 )                                                         \n',\
'RI':'\
    for, space-group number between 149 and 167, Rhombohedral I structure.        \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
    111 112 113 114  0   0      112  A  123 124  0   0      113 123 133 134  0   0  \n\
    112  A  123 124  0   0       A  222 113  G   0   0      123 113 133 -134 0   0  \n\
    113 123 133 134  0   0      123 113 133 -134 0   0      133 133 333  0   0   0  \n\
    114 124 134 144  0   0      124  G -134 155  0   0      134 -134 0  344  0   0  \n\
     0   0   0   0  155  F       0   0   0   0  144  H       0   0   0   0  344 134 \n\
     0   0   0   0   F   B       0   0   0   0   H   C       0   0   0   0  134  D  \n\
                                                                                    \n\
    %%%%%%%% 4-ij %%%%%%%%      %%%%%%%% 5-ij %%%%%%%%      %%%%%%%% 6-ij %%%%%%%%  \n\
    114 124 134 144  0   0       0   0   0   0  155  F       0   0   0   0   F   B  \n\
    124  G -134 155  0   0       0   0   0   0  144  H       0   0   0   0   H   C  \n\
    134 -134 0  344  0   0       0   0   0   0  344 134      0   0   0   0  134  D  \n\
    144 155 344 444  0   0       0   0   0   0   0   E       0   0   0   0   E  124 \n\
     0   0   0   0 -444  E      155 144 344  0   0   0       F   H  134  E   0   0  \n\
     0   0   0   0   E  124      F   H  134  E   0   0       B   C   D  124  0   0  \n\
                                                                                    \n\
    A = 111 - 222 + 112                                                             \n\
    B = 3/4 * 222 - 1/2 * 111 - 1/4 * 112                                           \n\
    C = 1/2 * 111 - 1/4 * 222 - 1/4 * 112                                           \n\
    D = 1/2 * ( 113 - 123 )                                                         \n\
    E = 1/2 * ( 155 - 144 )                                                         \n\
    F = 1/2 * ( 114 + 3 * 124 )                                                     \n\
    G =-114 - 2 * 124                                                               \n\
    H = 1/2 * ( 114 - 124 )                                                         \n',\
'RII':'\
    for, space-group number between 143 and 148, Rhombohedral II structure.       \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
                                                                                    \n',\
'TI':'\
    for, space-group number between 89 and 142, Tetragonal I structure.           \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
                                                                                    \n',\
'TII':'\
    for, space-group number between 75 and 88, Tetragonal II structure.           \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
                                                                                    \n',\
'O':'\
    for, space-group number between 16 and 74, Orthorhombic structure.            \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
                                                                                    \n',\
'M':'\
    for, space-group number between 3 and 15, Monoclinic structure.               \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
                                                                                    \n',\
'N':'\
    for, 1 and 2 space-group number, Triclinic structure.                         \n\n\
    %%%%%%%% 1-ij %%%%%%%%      %%%%%%%% 2-ij %%%%%%%%      %%%%%%%% 3-ij %%%%%%%%  \n\
                                                                                    \n'}
#--------------------------------------------------------------------------------------------------

#%!%!%--- Reading the "INFO_ElaStic" file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
INFO=open('INFO_ElaStic', 'r')

l1  = INFO.readline()
ordr= int(l1.split()[-1])

if (ordr != 2 and ordr != 3):
    sys.exit('\n.... Oops ERROR: The order of the elastic constant is NOT clear !?!?!?'\
             '\n                 Something is WRONG in the "INFO_ElaStic" file.\n')

l2  = INFO.readline()
mthd= l2.split()[-1]

if (mthd != 'Stress' and mthd != 'Energy'):
    sys.exit('\n.... Oops ERROR: The method of the calculation is NOT clear !?!?!?'\
             '\n                 Something is WRONG in the "INFO_ElaStic" file.\n')

l3  = INFO.readline()
cod = l3.split()[-1]

if (cod != 'WIEN2k' and cod != 'exciting' and cod != 'ESPRESSO'):
    sys.exit('\n.... Oops ERROR: The DFT code is NOT clear !?!?!?'\
             '\n                 Something is WRONG in the "INFO_ElaStic" file.\n')

l4  = INFO.readline()
SGN = int(l4.split()[-1])

l5  = INFO.readline()
V0  = float(l5.split()[-2])

l6  = INFO.readline()
mdr = float(l6.split()[-1])

l7  = INFO.readline()
NoP = int(l7.split()[-1])

INFO.close()
#--------------------------------------------------------------------------------------------------

#%!%!%--- Calculating the Space-Group Number and classifying it ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
# NoD = Number of Deformation
if (1 <= SGN and SGN <= 2):      # Triclinic
    LC = 'N'
    NoD= 1 # ?

elif(3 <= SGN and SGN <= 15):    # Monoclinic
    LC = 'M'
    NoD= 1 # ?

elif(16 <= SGN and SGN <= 74):   # Orthorhombic
    LC = 'O'
    NoD= 1 # ?

elif(75 <= SGN and SGN <= 88):   # Tetragonal II
    LC = 'TII'
    NoD= 1 # ?
  
elif(89 <= SGN and SGN <= 142):  # Tetragonal I
    LC = 'TI'
    NoD= 1 # ?

elif(143 <= SGN and SGN <= 148): # Rhombohedral II 
    LC = 'RII'
    NoD= 1 # ?

elif(149 <= SGN and SGN <= 167): # Rhombohedral I
    LC = 'RI'
    NoD= 1 # ?

elif(168 <= SGN and SGN <= 176): # Hexagonal II
    LC = 'HII'
    NoD= 1 # ?

elif(177 <= SGN and SGN <= 194): # Hexagonal I
    LC = 'HI'
    NoD= 1 # ?

elif(195 <= SGN and SGN <= 206): # Cubic II
    LC = 'CII'
    NoD= 1 # ?

elif(207 <= SGN and SGN <= 230): # Cubic I
    LC = 'CI'
    NoD= 1 # ?

else: sys.exit('\n.... Oops ERROR: WRONG Space-Group Number !?!?!?\n')
#--------------------------------------------------------------------------------------------------

lineseparator=' '
for i in range(0,79):
    lineseparator=lineseparator+'%'

#%!%!%--- Make the Matrix  ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
if (LC == 'CI'):
    Matrix = mat([[ 1.0, 23.0, 12.0, 16.0, 61.0,  0.0],
                  [ 4.0, 26.0,  6.0, 25.0, 52.0,  0.0],
                  [ 9.0, 23.0,  4.0, 36.0, 41.0,  0.0],
                  [ 0.0,  0.0,  0.0,  8.0, 40.0, 60.0],
                  [ 0.0,  0.0,  0.0, 20.0, 40.0, 48.0],
                  [ 0.0,  0.0,  0.0, 36.0, 36.0, 40.0],
                  [ 9.0,-10.0, 10.0, 36.0, 20.0,  0.0],
                  [25.0,-10.0, -6.0,  4.0, 52.0,  0.0],
                  [ 1.0, 38.0,-30.0, 16.0, 40.0,  0.0],
                  [ 0.0,  0.0,  0.0, 36.0,-72.0,-16.0],
                  [ 0.0,  0.0,  0.0,-20.0,  8.0,-48.0],
                  [ 0.0,  0.0,  0.0,  8.0, 16.0, 24.0],
                  [25.0,152.0, 48.0,  4.0, 10.0,  0.0],
                  [16.0,149.0, 60.0,  1.0, 13.0,  0.0],
                  [36.0,149.0, 40.0,  9.0,  5.0,  0.0],
                  [ 0.0,  0.0,  0.0,-20.0,-40.0,  6.0],
                  [ 0.0,  0.0,  0.0, -8.0,-22.0, 12.0],
                  [ 0.0,  0.0,  0.0,-36.0,-54.0,  4.0]])

if (LC == 'CII'):
    Matrix = mat([[ 1.0,  13.0, 10.0, 12.0, 16.0, 25.0, 36.0,   0.0],
                  [ 4.0,  17.0,  9.0,  6.0, 25.0, 36.0, 16.0,   0.0],
                  [ 9.0,  23.0,  0.0,  4.0, 36.0, 16.0, 25.0,   0.0],
                  [ 0.0,   0.0,  0.0,  0.0,  8.0, 40.0,  0.0,  60.0],
                  [ 0.0,   0.0,  0.0,  0.0, 18.0, 36.0,  0.0,  48.0],
                  [ 0.0,   0.0,  0.0,  0.0, 36.0, 36.0,  0.0,  40.0],
                  [ 9.0, -29.0, 19.0, 10.0, 36.0,  4.0, 16.0,   0.0],
                  [25.0, -11.0,  1.0, -6.0,  4.0, 16.0, 36.0,   0.0],
                  [ 1.0,  38.0,  0.0,-30.0, 16.0, 36.0,  4.0,   0.0],
                  [ 0.0,   0.0,  0.0,  0.0, 36.0,-72.0,  0.0, -16.0],
                  [ 0.0,   0.0,  0.0,  0.0,-40.0, 16.0,  0.0, -48.0],
                  [ 0.0,   0.0,  0.0,  0.0,  8.0, 16.0,  0.0,  24.0]])
if (LC == 'HI'):
    Matrix = mat([[-13.0, -1.0,  6.0,  12.0,  9.0,  16.0,  25.0,  23.0, 0.0,   0.0],
                  [ 22.0, -4.0, 12.0,   6.0,  9.0,  25.0,  16.0,  -9.0, 0.0,   0.0],
                  [  0.0,  0.0, 23.0, -14.0, 18.0,   0.0,   0.0,   0.0, 9.0,  41.0],
                  [  0.0,  0.0,  0.0,   0.0,  0.0, -22.0,  46.0,   0.0, 0.0,  24.0],
                  [  0.0,  0.0,  0.0,   0.0,  0.0,  -6.0,  33.0,   0.0, 0.0,  27.0],
                  [  6.0, -9.0, 18.0, -18.0,  0.0,  -20.,  20.0,   3.0, 0.0,   0.0],
                  [ 26.0, -9.0, -6.0,  10.0,  1.0,  36.0,   4.0, -13.0, 0.0,   0.0],
                  [-22.0,-25.0, 10.0,  -6.0,  1.0,   4.0,  36.0,  51.0, 0.0,   0.0],
                  [  0.0,  0.0, 42.0, -38.0,  4.0,   0.0,   0.0,   0.0, 1.0,  40.0],
                  [  0.0,  0.0,  0.0,   0.0,  0.0,  44.0, -68.0,   0.0, 0.0, -12.0],
                  [  0.0,  0.0,  0.0,   0.0,  0.0, -16.0,   0.0,   0.0, 0.0,  -8.0],
                  [ 32.0, -4.0,  4.0,  -4.0,  0.0, -12.0,  12.0, -28.0, 0.0,   0.0],
                  [ 36.5,53.75, 60.0,  48.0, 36.0,   4.0,   1.0, -9.25, 0.0,   0.0],
                  [ 44.5,62.75, 48.0,  60.0, 36.0,   1.0,   4.0,-26.25, 0.0,   0.0],
                  [  0.0,  0.0, 45.5,  35.5,108.0,   0.0,   0.0,   0.0,36.0,   5.0],
                  [  0.0,  0.0,  0.0,   0.0,  0.0, -23.0, -13.0,   0.0, 0.0, -24.0],
                  [  0.0,  0.0,  0.0,   0.0,  0.0, -18.0,  -9.0,   0.0, 0.0, -18.0],
                  [ 13.0, 13.5, 18.0,  18.0,  0.0,   2.0,   2.0, -16.5, 0.0,   0.0]])
if (LC == 'HII'):
    Matrix = mat([[-13.0, -1.0,  6.0,-12.0, 12.0,  9.0, 16.0, 40.0, 25.0, 23.0, 0.0,  0.0],
                  [ 22.0, -4.0, 12.0, 24.0,  6.0,  9.0, 25.0,-40.0, 16.0, -9.0, 0.0,  0.0],
                  [  0.0,  0.0, 23.0,  0.0,-14.0, 18.0,  0.0,  0.0,  0.0,  0.0, 9.0, 41.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,-22.0, 48.0, 46.0,  0.0, 0.0, 24.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -4.0,-60.0, 34.0,  0.0, 0.0, 30.0],
                  [  6.0, -9.0, 18.0,-36.0,-18.0,  0.0,-20.0,  0.0, 20.0,  3.0, 0.0,  0.0],
                  [ 26.0, -9.0, -6.0,-64.0, 10.0,  1.0, 36.0, 24.0,  4.0,-13.0, 0.0,  0.0],
                  [-22.0,-25.0, 10.0, 40.0, -6.0,  1.0,  4.0,-24.0, 36.0, 51.0, 0.0,  0.0],
                  [  0.0,  0.0, 42.0,  0.0,-38.0,  4.0,  0.0,  0.0,  0.0,  0.0, 1.0, 40.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 44.0,-48.0,-68.0,  0.0, 0.0,-12.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  4.0, 16.0,-12.0,  0.0, 0.0, -4.0],
                  [ 32.0, -4.0,  4.0,-16.0, -4.0,  0.0,-12.0,  0.0, 12.0,-28.0, 0.0,  0.0]])
if (LC == 'RI'):
    Matrix = mat([[-13.0, -1.0,  6.0, 23.0, 12.0, 61.0,  9.0, 24.0, 16.0, 25.0,  23.0,  0.0,  0.0,  0.0],
                  [ 22.0, -4.0, 12.0, 14.0,  6.0,-62.0,  9.0,-30.0, 25.0, 16.0,  -9.0,  0.0,  0.0,  0.0],
                  [  0.0,  0.0, 23.0,  0.0,-14.0,  0.0, 18.0, 60.0,  0.0,  0.0,   0.0,  9.0, 41.0,  0.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0, 36.0,  0.0,  0.0,-22.0, 46.0,   0.0,  0.0, 24.0, -9.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -4.0, 34.0,   0.0,  0.0, 30.0,  0.0],
                  [  6.0, -9.0, 18.0,  0.0,-18.0,  0.0,  0.0,  0.0,-20.0, 20.0,   3.0,  0.0,  0.0,  0.0],
                  [ 26.0, -9.0, -6.0, 32.0, 10.0,-72.0,  1.0,-12.0, 36.0,  4.0, -13.0,  0.0,  0.0,  0.0],
                  [-22.0,-25.0, 10.0, 52.0, -6.0,128.0,  1.0,  4.0,  4.0, 36.0,  51.0,  0.0,  0.0,  0.0],
                  [  0.0,  0.0, 42.0,  0.0,-38.0,  0.0,  4.0,-16.0,  0.0,  0.0,   0.0,  1.0, 40.0,  0.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0, 16.0,  0.0,  0.0, 44.0,-68.0,   0.0,  0.0,-12.0, 32.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  4.0,-12.0,   0.0,  0.0, -4.0,  0.0],
                  [ 32.0, -4.0,  4.0,  0.0, -4.0,  0.0,  0.0,  0.0,-12.0, 12.0, -28.0,  0.0,  0.0,  0.0],
                  [ 36.5,53.75, 60.0,-18.5, 48.0,-11.5, 36.0,-24.0,  4.0,  1.0, -9.25,  0.0,  0.0,  0.0],
                  [ 44.5,62.75, 48.0, 19.0, 60.0, 29.0, 36.0, 12.0,  1.0,  4.0,-26.25,  0.0,  0.0,  0.0],
                  [  0.0,  0.0, 45.5,  0.0, 35.5,  0.0,108.0,  6.0,  0.0,  0.0,   0.0, 36.0,  5.0,  0.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0,  9.0,  0.0,  0.0,-23.0,-13.0,   0.0,  0.0,-24.0,  3.0],
                  [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,-14.0, -4.0,   0.0,  0.0,-12.0,  0.0],
                  [  3.0, 13.5,-18.0,  0.0, 18.0,  0.0,  0.0,  0.0, -2.0,  2.0, -16.5,  0.0,  0.0,  0.0]])
#if (LC == 'RII'): Matrix=mat()
#if (LC == 'TI' ): Matrix=mat()
#if (LC == 'TII'): Matrix=mat()
#if (LC == 'O'  ): Matrix=mat()
#if (LC == 'M'  ): Matrix=mat()
#if (LC == 'N'  ): Matrix=mat()

if (cod == 'WIEN2k'):
    CONV = 1.
if (cod == 'exciting'):
    CONV = 1.
if (cod == 'ESPRESSO'):
    CONV =-2./10.

#%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
#%!%!% ------------ Calculating the second derivative and Cross-Validation Error ----------- %!%!%#
#%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
OBJ = open('ElaStic_3rd.in', 'r')

# RoD = Range of Deformation
RoD = OBJ.read().strip().split()

if (len(RoD) != 13*NoD):
    sys.exit('\n.... Oops ERROR: Something is WRONG in the "ElaStic_3rd.in" file !?!?!?\n')

os.chdir('Stress-vs-Strain')

sigma = []
for i in range(1, NoD+1):
    if (i<10):
        Dstn ='Dst0'+str(i)
    else:
        Dstn ='Dst' +str(i)

    for j in range(0, 13*NoD-1, 13):
        if (RoD[j] == Dstn):
            mdr1 = abs(float(RoD[j+1]))
            mdr2 = abs(float(RoD[j+2]))
            mdr3 = abs(float(RoD[j+3]))
            mdr4 = abs(float(RoD[j+4]))
            mdr5 = abs(float(RoD[j+5]))
            mdr6 = abs(float(RoD[j+6]))
            ordr1= abs(int(float(RoD[j+7])))
            ordr2= abs(int(float(RoD[j+8])))
            ordr3= abs(int(float(RoD[j+9])))
            ordr4= abs(int(float(RoD[j+10])))
            ordr5= abs(int(float(RoD[j+11])))
            ordr6= abs(int(float(RoD[j+12])))

        if (os.path.exists(Dstn+'_Lagrangian-stress.dat') == False):
            sys.exit('\n.... Oops ERROR: Where is the "'+Dstn+'_Lagrangian-stress.dat" !?!?!?\n')

        eta_strs = open(Dstn+'_Lagrangian-stress.dat', 'r')
        eta_strs.readline()
        eta_strs.readline()

        str1= []
        str2= []
        str3= []
        str4= []
        str5= []
        str6= []

        ls1 = []
        ls2 = []
        ls3 = []
        ls4 = []
        ls5 = []
        ls6 = []

        while True:
            line = eta_strs.readline()
            line = line.strip()
            if (len(line) == 0): break

            eta, lsxx, lsyy, lszz, lsyz, lsxz, lsxy = line.split()
            if (-mdr1 <= float(eta) and float(eta) <= mdr1):
                str1.append(float(eta))
                ls1.append(float(lsxx))
            if (-mdr2 <= float(eta) and float(eta) <= mdr2):
                str2.append(float(eta))
                ls2.append(float(lsyy))
            if (-mdr3 <= float(eta) and float(eta) <= mdr3):
                str3.append(float(eta))
                ls3.append(float(lszz))
            if (-mdr4 <= float(eta) and float(eta) <= mdr4):
                str4.append(float(eta))
                ls4.append(float(lsyz))
            if (-mdr5 <= float(eta) and float(eta) <= mdr5):
                str5.append(float(eta))
                ls5.append(float(lsxz))
            if (-mdr6 <= float(eta) and float(eta) <= mdr6):
                str6.append(float(eta))
                ls6.append(float(lsxy))

        num_eta1 = len(str1)
        if (num_eta1 < ordr1+1):
            sys.exit('\n.... Oops ERROR: NOT enough stress points in "'+Dstn+'_Lagrangian-stress.dat'\
                     '\n                 for '+str(ordr1)+' order polynomial fit.\n')

        num_eta2 = len(str2)
        if (num_eta2 < ordr2+1):
            sys.exit('\n.... Oops ERROR: NOT enough stress points in "'+Dstn+'_Lagrangian-stress.dat'\
                     '\n                 for '+str(ordr2)+' order polynomial fit.\n')

        num_eta3 = len(str3)
        if (num_eta3 < ordr3+1):
            sys.exit('\n.... Oops ERROR: NOT enough stress points in "'+Dstn+'_Lagrangian-stress.dat'\
                     '\n                 for '+str(ordr3)+' order polynomial fit.\n')

        num_eta4 = len(str4)
        if (num_eta4 < ordr4+1):
            sys.exit('\n.... Oops ERROR: NOT enough stress points in "'+Dstn+'_Lagrangian-stress.dat'\
                     '\n                 for '+str(ordr4)+' order polynomial fit.\n')

        num_eta5 = len(str5)
        if (num_eta5 < ordr5+1):
            sys.exit('\n.... Oops ERROR: NOT enough stress points in "'+Dstn+'_Lagrangian-stress.dat'\
                     '\n                 for '+str(ordr5)+' order polynomial fit.\n')

        num_eta6 = len(str6)
        if (num_eta6 < ordr6+1):
            sys.exit('\n.... Oops ERROR: NOT enough stress points in "'+Dstn+'_Lagrangian-stress.dat'\
                     '\n                 for '+str(ordr6)+' order polynomial fit.\n')

    coeff1 = []
    coeff1 = np.polyfit(str1, ls1, ordr1)
    sigma.append(CONV * float(coeff1[ordr1-2]))

    coeff2 = []
    coeff2 = np.polyfit(str2, ls2, ordr2)
    sigma.append(CONV * float(coeff2[ordr2-2]))

    coeff3 = []
    coeff3 = np.polyfit(str3, ls3, ordr3)
    sigma.append(CONV * float(coeff3[ordr3-2]))

    coeff4 = []
    coeff4 = np.polyfit(str4, ls4, ordr4)
    sigma.append(CONV * float(coeff4[ordr4-2]))

    coeff5 = []
    coeff5 = np.polyfit(str5, ls5, ordr5)
    sigma.append(CONV * float(coeff5[ordr5-2]))

    coeff6 = []
    coeff6 = np.polyfit(str6, ls6, ordr6)
    sigma.append(CONV * float(coeff6[ordr6-2]))

#%!%!%--- Calculating the elastic constant and writing the output file ---%!%!%!%!%!%!%!%!%!%!%!%!%
if (len(sigma) != 6*NoD):
    sys.exit('\n.... Oops ERROR: Something is WRONG in the "ElaStic_3rd.in" file !?!?!?\n')

sigma = np.array(sigma)
C     = linalg.lstsq(Matrix,sigma)

fo = open('ElaStic_3rd.out','w')
print >>fo,  '    The output of ElaStic code                                            \n'\
             '    Today is '+ time.asctime() +                                         '\n'\
                                                                                       '\n'\
             '    Symmetry of the third-order elastic constants in Voigt notation       \n'\
                + head[LC] +                                                           '\n'

#-- Cubic I Structure -----------------------------------------------------------------------------
if (LC == 'CI'):
    print >>fo, '    C111 =', '%11.2f'%(C[0][0]), '  GPa\n'\
                '    C112 =', '%11.2f'%(C[0][1]), '  GPa\n'\
                '    C123 =', '%11.2f'%(C[0][2]), '  GPa\n'\
                '    C144 =', '%11.2f'%(C[0][3]), '  GPa\n'\
                '    C155 =', '%11.2f'%(C[0][4]), '  GPa\n'\
                '    C456 =', '%11.2f'%(C[0][5]), '  GPa\n'
#--------------------------------------------------------------------------------------------------

#-- Cubic II structure ----------------------------------------------------------------------------
if (LC == 'CII'):
    print >>fo, '    C111 =', '%11.2f'%(C[0][0]), '  GPa\n'\
                '    C112 =', '%11.2f'%(C[0][1]), '  GPa\n'\
                '    C113 =', '%11.2f'%(C[0][2]), '  GPa\n'\
                '    C123 =', '%11.2f'%(C[0][3]), '  GPa\n'\
                '    C144 =', '%11.2f'%(C[0][4]), '  GPa\n'\
                '    C155 =', '%11.2f'%(C[0][5]), '  GPa\n'\
                '    C166 =', '%11.2f'%(C[0][6]), '  GPa\n'\
                '    C456 =', '%11.2f'%(C[0][7]), '  GPa\n'
#--------------------------------------------------------------------------------------------------

#-- Hexagonal I structure -------------------------------------------------------------------------
if (LC == 'HI'):
    print >>fo, '    C111 =', '%11.2f'%(C[0][0]), '  GPa\n'\
                '    C112 =', '%11.2f'%(C[0][1]), '  GPa\n'\
                '    C113 =', '%11.2f'%(C[0][2]), '  GPa\n'\
                '    C123 =', '%11.2f'%(C[0][3]), '  GPa\n'\
                '    C133 =', '%11.2f'%(C[0][4]), '  GPa\n'\
                '    C144 =', '%11.2f'%(C[0][5]), '  GPa\n'\
                '    C155 =', '%11.2f'%(C[0][6]), '  GPa\n'\
                '    C222 =', '%11.2f'%(C[0][7]), '  GPa\n'\
                '    C333 =', '%11.2f'%(C[0][8]), '  GPa\n'\
                '    C344 =', '%11.2f'%(C[0][9]), '  GPa\n'
#--------------------------------------------------------------------------------------------------

#-- Hexagonal II structure ------------------------------------------------------------------------
if (LC == 'HII'):
    print >>fo, '    C111 =', '%11.2f'%(C[0][0]), '  GPa\n'\
                '    C112 =', '%11.2f'%(C[0][1]), '  GPa\n'\
                '    C113 =', '%11.2f'%(C[0][2]), '  GPa\n'\
                '    C116 =', '%11.2f'%(C[0][3]), '  GPa\n'\
                '    C123 =', '%11.2f'%(C[0][4]), '  GPa\n'\
                '    C133 =', '%11.2f'%(C[0][5]), '  GPa\n'\
                '    C144 =', '%11.2f'%(C[0][6]), '  GPa\n'\
                '    C145 =', '%11.2f'%(C[0][7]), '  GPa\n'\
                '    C155 =', '%11.2f'%(C[0][8]), '  GPa\n'\
                '    C222 =', '%11.2f'%(C[0][9]), '  GPa\n'\
                '    C333 =', '%11.2f'%(C[0][10]),'  GPa\n'\
                '    C344 =', '%11.2f'%(C[0][11]),'  GPa\n'
#--------------------------------------------------------------------------------------------------

#-- Rhombohedral I structure ----------------------------------------------------------------------
if (LC == 'RI'):
    print >>fo, '    C111 =', '%11.2f'%(C[0][0]), '  GPa\n'\
                '    C112 =', '%11.2f'%(C[0][1]), '  GPa\n'\
                '    C113 =', '%11.2f'%(C[0][2]), '  GPa\n'\
                '    C114 =', '%11.2f'%(C[0][3]), '  GPa\n'\
                '    C123 =', '%11.2f'%(C[0][4]), '  GPa\n'\
                '    C124 =', '%11.2f'%(C[0][5]), '  GPa\n'\
                '    C133 =', '%11.2f'%(C[0][6]), '  GPa\n'\
                '    C134 =', '%11.2f'%(C[0][7]), '  GPa\n'\
                '    C144 =', '%11.2f'%(C[0][8]), '  GPa\n'\
                '    C155 =', '%11.2f'%(C[0][9]), '  GPa\n'\
                '    C222 =', '%11.2f'%(C[0][10]),'  GPa\n'\
                '    C333 =', '%11.2f'%(C[0][11]),'  GPa\n'\
                '    C344 =', '%11.2f'%(C[0][12]),'  GPa\n'\
                '    C444 =', '%11.2f'%(C[0][13]),'  GPa\n'
#--------------------------------------------------------------------------------------------------

#--- Rhombohedral II structure --------------------------------------------------------------------
#if (LC == 'RII'):
#--------------------------------------------------------------------------------------------------

#--- Tetragonal I structure -----------------------------------------------------------------------
#if (LC == 'TI'):
#--------------------------------------------------------------------------------------------------

#--- Tetragonal II structure ----------------------------------------------------------------------
#if (LC == 'TII'):
#--------------------------------------------------------------------------------------------------

#--- Orthorhombic structure -----------------------------------------------------------------------
#if (LC == 'O'):
#--------------------------------------------------------------------------------------------------

#--- Monoclinic structure -------------------------------------------------------------------------
#if (LC == 'M'):
#--------------------------------------------------------------------------------------------------

#--- Triclinic structure --------------------------------------------------------------------------
#if (LC == 'N'):
#--------------------------------------------------------------------------------------------------
print >>fo,'\n    ... Have a G00D Day, Week, Month, Year, and Century (if you are lucky) ...    '\
           '\n               Bye-Bye! Tschuess! Ciao! Poka! Zia Jian! KhodaHafez!             \n'
fo.close()
#--------------------------------------------------------------------------------------------------
os.chdir('../')
os.system('cp -f Stress-vs-Strain/ElaStic_3rd.out .')
